/*
 * RewardSciencesAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/13/2016
 */
package com.rewardsciences.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.rewardsciences.api.*;
import com.rewardsciences.api.models.*;
import com.rewardsciences.api.exceptions.*;
import com.rewardsciences.api.http.client.HttpClient;
import com.rewardsciences.api.http.client.HttpContext;
import com.rewardsciences.api.http.request.HttpRequest;
import com.rewardsciences.api.http.response.HttpResponse;
import com.rewardsciences.api.http.response.HttpStringResponse;
import com.rewardsciences.api.http.client.APICallBack;

public class Activities extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static Activities instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the Activities class 
     */
    public static Activities getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new Activities();
            }
        }
        return instance;
    }

    /**
     * This endpoint lets you track the activities your users perform.
     * @param    userId    Required parameter: The ID of the user who is performing the activity.
     * @param    activityType    Required parameter: The type of activity the user is performing. Example: 'purchased-a-product'
     * @param    price    Optional parameter: The price related to the activity, if any. Expressed in USD
     * @param    recordId    Optional parameter: The ID for the record associated with the activity in your database.
     * @return    Returns the void response from the API call 
     */
    public void trackAsync(
                final int userId,
                final String activityType,
                final Integer price,
                final String recordId,
                final APICallBack<DynamicResponse> callBack
    ) {
        //validating required parameters
        if (null == activityType)
            throw new NullPointerException("The parameter \"activityType\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/activities");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5112262004803489495L;
            {
                    put( "user_id", userId );
                    put( "activity_type", activityType );
                    put( "price", price );
                    put( "record_id", recordId );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4952484057517906688L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "Accept", Configuration.accept );
                    put( "Content-Type", Configuration.contentType );
                    put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            DynamicResponse _result = new DynamicResponse(_response);

                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)	
                            {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}